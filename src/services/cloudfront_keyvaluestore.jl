# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: cloudfront_keyvaluestore
using AWS.Compat
using AWS.UUIDs

"""
    delete_key(if-_match, key, kvs_arn)
    delete_key(if-_match, key, kvs_arn, params::Dict{String,<:Any})

Deletes the key value pair specified by the key.

# Arguments
- `if-_match`: The current version (ETag) of the Key Value Store that you are deleting keys
  from, which you can get using DescribeKeyValueStore.
- `key`: The key to delete.
- `kvs_arn`: The Amazon Resource Name (ARN) of the Key Value Store.

"""
delete_key(If_Match, Key, KvsARN; aws_config::AbstractAWSConfig=global_aws_config()) =
    cloudfront_keyvaluestore(
        "DELETE",
        "/key-value-stores/$(KvsARN)/keys/$(Key)",
        Dict{String,Any}("headers" => Dict{String,Any}("If-Match" => If_Match));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function delete_key(
    If_Match,
    Key,
    KvsARN,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cloudfront_keyvaluestore(
        "DELETE",
        "/key-value-stores/$(KvsARN)/keys/$(Key)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("headers" => Dict{String,Any}("If-Match" => If_Match)),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    describe_key_value_store(kvs_arn)
    describe_key_value_store(kvs_arn, params::Dict{String,<:Any})

Returns metadata information about Key Value Store.

# Arguments
- `kvs_arn`: The Amazon Resource Name (ARN) of the Key Value Store.

"""
describe_key_value_store(KvsARN; aws_config::AbstractAWSConfig=global_aws_config()) =
    cloudfront_keyvaluestore(
        "GET",
        "/key-value-stores/$(KvsARN)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function describe_key_value_store(
    KvsARN, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cloudfront_keyvaluestore(
        "GET",
        "/key-value-stores/$(KvsARN)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_key(key, kvs_arn)
    get_key(key, kvs_arn, params::Dict{String,<:Any})

Returns a key value pair.

# Arguments
- `key`: The key to get.
- `kvs_arn`: The Amazon Resource Name (ARN) of the Key Value Store.

"""
get_key(Key, KvsARN; aws_config::AbstractAWSConfig=global_aws_config()) =
    cloudfront_keyvaluestore(
        "GET",
        "/key-value-stores/$(KvsARN)/keys/$(Key)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_key(
    Key,
    KvsARN,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cloudfront_keyvaluestore(
        "GET",
        "/key-value-stores/$(KvsARN)/keys/$(Key)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_keys(kvs_arn)
    list_keys(kvs_arn, params::Dict{String,<:Any})

Returns a list of key value pairs.

# Arguments
- `kvs_arn`: The Amazon Resource Name (ARN) of the Key Value Store.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: Maximum number of results that are returned per call. The default is 10
  and maximum allowed page is 50.
- `"NextToken"`: If nextToken is returned in the response, there are more results
  available. Make the next call using the returned token to retrieve the next page.
"""
list_keys(KvsARN; aws_config::AbstractAWSConfig=global_aws_config()) =
    cloudfront_keyvaluestore(
        "GET",
        "/key-value-stores/$(KvsARN)/keys";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_keys(
    KvsARN, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return cloudfront_keyvaluestore(
        "GET",
        "/key-value-stores/$(KvsARN)/keys",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_key(if-_match, key, kvs_arn, value)
    put_key(if-_match, key, kvs_arn, value, params::Dict{String,<:Any})

Creates a new key value pair or replaces the value of an existing key.

# Arguments
- `if-_match`: The current version (ETag) of the Key Value Store that you are putting keys
  into, which you can get using DescribeKeyValueStore.
- `key`: The key to put.
- `kvs_arn`: The Amazon Resource Name (ARN) of the Key Value Store.
- `value`: The value to put.

"""
put_key(If_Match, Key, KvsARN, Value; aws_config::AbstractAWSConfig=global_aws_config()) =
    cloudfront_keyvaluestore(
        "PUT",
        "/key-value-stores/$(KvsARN)/keys/$(Key)",
        Dict{String,Any}(
            "Value" => Value, "headers" => Dict{String,Any}("If-Match" => If_Match)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function put_key(
    If_Match,
    Key,
    KvsARN,
    Value,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cloudfront_keyvaluestore(
        "PUT",
        "/key-value-stores/$(KvsARN)/keys/$(Key)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "Value" => Value, "headers" => Dict{String,Any}("If-Match" => If_Match)
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_keys(if-_match, kvs_arn)
    update_keys(if-_match, kvs_arn, params::Dict{String,<:Any})

Puts or Deletes multiple key value pairs in a single, all-or-nothing operation.

# Arguments
- `if-_match`: The current version (ETag) of the Key Value Store that you are updating keys
  of, which you can get using DescribeKeyValueStore.
- `kvs_arn`: The Amazon Resource Name (ARN) of the Key Value Store.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Deletes"`: List of keys to delete.
- `"Puts"`: List of key value pairs to put.
"""
update_keys(If_Match, KvsARN; aws_config::AbstractAWSConfig=global_aws_config()) =
    cloudfront_keyvaluestore(
        "POST",
        "/key-value-stores/$(KvsARN)/keys",
        Dict{String,Any}("headers" => Dict{String,Any}("If-Match" => If_Match));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function update_keys(
    If_Match,
    KvsARN,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return cloudfront_keyvaluestore(
        "POST",
        "/key-value-stores/$(KvsARN)/keys",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("headers" => Dict{String,Any}("If-Match" => If_Match)),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
