# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: bedrock_agent
using AWS.Compat
using AWS.UUIDs

"""
    associate_agent_knowledge_base(agent_id, agent_version, description, knowledge_base_id)
    associate_agent_knowledge_base(agent_id, agent_version, description, knowledge_base_id, params::Dict{String,<:Any})

Associate a Knowledge Base to an existing Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Draft Version of the Agent.
- `description`:
- `knowledge_base_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"knowledgeBaseState"`:
"""
associate_agent_knowledge_base(
    agentId,
    agentVersion,
    description,
    knowledgeBaseId;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/",
    Dict{String,Any}("description" => description, "knowledgeBaseId" => knowledgeBaseId);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function associate_agent_knowledge_base(
    agentId,
    agentVersion,
    description,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "description" => description, "knowledgeBaseId" => knowledgeBaseId
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_agent(agent_name, agent_resource_role_arn)
    create_agent(agent_name, agent_resource_role_arn, params::Dict{String,<:Any})

Creates an Amazon Bedrock Agent

# Arguments
- `agent_name`:
- `agent_resource_role_arn`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`:
- `"customerEncryptionKeyArn"`:
- `"description"`:
- `"foundationModel"`:
- `"idleSessionTTLInSeconds"`:
- `"instruction"`:
- `"promptOverrideConfiguration"`:
- `"tags"`:
"""
create_agent(
    agentName, agentResourceRoleArn; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "PUT",
    "/agents/",
    Dict{String,Any}(
        "agentName" => agentName,
        "agentResourceRoleArn" => agentResourceRoleArn,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_agent(
    agentName,
    agentResourceRoleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "agentName" => agentName,
                    "agentResourceRoleArn" => agentResourceRoleArn,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_agent_action_group(action_group_name, agent_id, agent_version)
    create_agent_action_group(action_group_name, agent_id, agent_version, params::Dict{String,<:Any})

Creates an Action Group for existing Amazon Bedrock Agent

# Arguments
- `action_group_name`:
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Draft Version of the Agent.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"actionGroupExecutor"`:
- `"actionGroupState"`:
- `"apiSchema"`:
- `"clientToken"`:
- `"description"`:
- `"parentActionGroupSignature"`:
"""
create_agent_action_group(
    actionGroupName,
    agentId,
    agentVersion;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/",
    Dict{String,Any}(
        "actionGroupName" => actionGroupName, "clientToken" => string(uuid4())
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_agent_action_group(
    actionGroupName,
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "actionGroupName" => actionGroupName, "clientToken" => string(uuid4())
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_agent_alias(agent_alias_name, agent_id)
    create_agent_alias(agent_alias_name, agent_id, params::Dict{String,<:Any})

Creates an Alias for an existing Amazon Bedrock Agent

# Arguments
- `agent_alias_name`:
- `agent_id`: Id generated at the server side when an Agent is created

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`:
- `"description"`:
- `"routingConfiguration"`:
- `"tags"`:
"""
create_agent_alias(
    agentAliasName, agentId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "PUT",
    "/agents/$(agentId)/agentaliases/",
    Dict{String,Any}("agentAliasName" => agentAliasName, "clientToken" => string(uuid4()));
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_agent_alias(
    agentAliasName,
    agentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/$(agentId)/agentaliases/",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "agentAliasName" => agentAliasName, "clientToken" => string(uuid4())
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_data_source(data_source_configuration, knowledge_base_id, name)
    create_data_source(data_source_configuration, knowledge_base_id, name, params::Dict{String,<:Any})

Create a new data source

# Arguments
- `data_source_configuration`:
- `knowledge_base_id`:
- `name`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`:
- `"description"`:
- `"serverSideEncryptionConfiguration"`:
- `"vectorIngestionConfiguration"`:
"""
create_data_source(
    dataSourceConfiguration,
    knowledgeBaseId,
    name;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/knowledgebases/$(knowledgeBaseId)/datasources/",
    Dict{String,Any}(
        "dataSourceConfiguration" => dataSourceConfiguration,
        "name" => name,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_data_source(
    dataSourceConfiguration,
    knowledgeBaseId,
    name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/knowledgebases/$(knowledgeBaseId)/datasources/",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "dataSourceConfiguration" => dataSourceConfiguration,
                    "name" => name,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_knowledge_base(knowledge_base_configuration, name, role_arn, storage_configuration)
    create_knowledge_base(knowledge_base_configuration, name, role_arn, storage_configuration, params::Dict{String,<:Any})

Create a new knowledge base

# Arguments
- `knowledge_base_configuration`:
- `name`:
- `role_arn`:
- `storage_configuration`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`:
- `"description"`:
- `"tags"`:
"""
create_knowledge_base(
    knowledgeBaseConfiguration,
    name,
    roleArn,
    storageConfiguration;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/knowledgebases/",
    Dict{String,Any}(
        "knowledgeBaseConfiguration" => knowledgeBaseConfiguration,
        "name" => name,
        "roleArn" => roleArn,
        "storageConfiguration" => storageConfiguration,
        "clientToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_knowledge_base(
    knowledgeBaseConfiguration,
    name,
    roleArn,
    storageConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/knowledgebases/",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "knowledgeBaseConfiguration" => knowledgeBaseConfiguration,
                    "name" => name,
                    "roleArn" => roleArn,
                    "storageConfiguration" => storageConfiguration,
                    "clientToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_agent(agent_id)
    delete_agent(agent_id, params::Dict{String,<:Any})

Deletes an Agent for existing Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"skipResourceInUseCheck"`: Skips checking if resource is in use when set to true.
  Defaults to false
"""
delete_agent(agentId; aws_config::AbstractAWSConfig=global_aws_config()) = bedrock_agent(
    "DELETE",
    "/agents/$(agentId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_agent(
    agentId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent(
        "DELETE",
        "/agents/$(agentId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_agent_action_group(action_group_id, agent_id, agent_version)
    delete_agent_action_group(action_group_id, agent_id, agent_version, params::Dict{String,<:Any})

Deletes an Action Group for existing Amazon Bedrock Agent.

# Arguments
- `action_group_id`: Id generated at the server side when an Agent ActionGroup is created
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Draft Version of the Agent.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"skipResourceInUseCheck"`: Skips checking if resource is in use when set to true.
  Defaults to false
"""
delete_agent_action_group(
    actionGroupId, agentId, agentVersion; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "DELETE",
    "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/$(actionGroupId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_agent_action_group(
    actionGroupId,
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "DELETE",
        "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/$(actionGroupId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_agent_alias(agent_alias_id, agent_id)
    delete_agent_alias(agent_alias_id, agent_id, params::Dict{String,<:Any})

Deletes an Alias for a Amazon Bedrock Agent

# Arguments
- `agent_alias_id`: Id generated at the server side when an Agent Alias is created
- `agent_id`: Id generated at the server side when an Agent is created

"""
delete_agent_alias(
    agentAliasId, agentId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "DELETE",
    "/agents/$(agentId)/agentaliases/$(agentAliasId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_agent_alias(
    agentAliasId,
    agentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "DELETE",
        "/agents/$(agentId)/agentaliases/$(agentAliasId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_agent_version(agent_id, agent_version)
    delete_agent_version(agent_id, agent_version, params::Dict{String,<:Any})

Deletes an Agent version for existing Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"skipResourceInUseCheck"`: Skips checking if resource is in use when set to true.
  Defaults to false
"""
delete_agent_version(
    agentId, agentVersion; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "DELETE",
    "/agents/$(agentId)/agentversions/$(agentVersion)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_agent_version(
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "DELETE",
        "/agents/$(agentId)/agentversions/$(agentVersion)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_data_source(data_source_id, knowledge_base_id)
    delete_data_source(data_source_id, knowledge_base_id, params::Dict{String,<:Any})

Delete an existing data source

# Arguments
- `data_source_id`:
- `knowledge_base_id`:

"""
delete_data_source(
    dataSourceId, knowledgeBaseId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "DELETE",
    "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_data_source(
    dataSourceId,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "DELETE",
        "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_knowledge_base(knowledge_base_id)
    delete_knowledge_base(knowledge_base_id, params::Dict{String,<:Any})

Delete an existing knowledge base

# Arguments
- `knowledge_base_id`:

"""
delete_knowledge_base(knowledgeBaseId; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "DELETE",
        "/knowledgebases/$(knowledgeBaseId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function delete_knowledge_base(
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "DELETE",
        "/knowledgebases/$(knowledgeBaseId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    disassociate_agent_knowledge_base(agent_id, agent_version, knowledge_base_id)
    disassociate_agent_knowledge_base(agent_id, agent_version, knowledge_base_id, params::Dict{String,<:Any})

Disassociate an existing Knowledge Base from an Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Draft Version of the Agent.
- `knowledge_base_id`: Id generated at the server side when a Knowledge Base is associated
  to an Agent

"""
disassociate_agent_knowledge_base(
    agentId,
    agentVersion,
    knowledgeBaseId;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "DELETE",
    "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/$(knowledgeBaseId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function disassociate_agent_knowledge_base(
    agentId,
    agentVersion,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "DELETE",
        "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/$(knowledgeBaseId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_agent(agent_id)
    get_agent(agent_id, params::Dict{String,<:Any})

Gets an Agent for existing Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created

"""
get_agent(agentId; aws_config::AbstractAWSConfig=global_aws_config()) = bedrock_agent(
    "GET", "/agents/$(agentId)/"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function get_agent(
    agentId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent(
        "GET",
        "/agents/$(agentId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_agent_action_group(action_group_id, agent_id, agent_version)
    get_agent_action_group(action_group_id, agent_id, agent_version, params::Dict{String,<:Any})

Gets an Action Group for existing Amazon Bedrock Agent Version

# Arguments
- `action_group_id`: Id generated at the server side when an Agent Action Group is created
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Version number generated when a version is created

"""
get_agent_action_group(
    actionGroupId, agentId, agentVersion; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "GET",
    "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/$(actionGroupId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_agent_action_group(
    actionGroupId,
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/$(actionGroupId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_agent_alias(agent_alias_id, agent_id)
    get_agent_alias(agent_alias_id, agent_id, params::Dict{String,<:Any})

Describes an Alias for a Amazon Bedrock Agent

# Arguments
- `agent_alias_id`: Id generated at the server side when an Agent Alias is created
- `agent_id`: Id generated at the server side when an Agent is created

"""
get_agent_alias(agentAliasId, agentId; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "GET",
        "/agents/$(agentId)/agentaliases/$(agentAliasId)/";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_agent_alias(
    agentAliasId,
    agentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/agents/$(agentId)/agentaliases/$(agentAliasId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_agent_knowledge_base(agent_id, agent_version, knowledge_base_id)
    get_agent_knowledge_base(agent_id, agent_version, knowledge_base_id, params::Dict{String,<:Any})

Gets a knowledge base associated to an existing Amazon Bedrock Agent Version

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Version number generated when a version is created
- `knowledge_base_id`: Id generated at the server side when a Knowledge Base is associated

"""
get_agent_knowledge_base(
    agentId,
    agentVersion,
    knowledgeBaseId;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "GET",
    "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/$(knowledgeBaseId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_agent_knowledge_base(
    agentId,
    agentVersion,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/$(knowledgeBaseId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_agent_version(agent_id, agent_version)
    get_agent_version(agent_id, agent_version, params::Dict{String,<:Any})

Gets an Agent version for existing Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`:

"""
get_agent_version(
    agentId, agentVersion; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "GET",
    "/agents/$(agentId)/agentversions/$(agentVersion)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_agent_version(
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/agents/$(agentId)/agentversions/$(agentVersion)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_data_source(data_source_id, knowledge_base_id)
    get_data_source(data_source_id, knowledge_base_id, params::Dict{String,<:Any})

Get an existing data source

# Arguments
- `data_source_id`:
- `knowledge_base_id`:

"""
get_data_source(
    dataSourceId, knowledgeBaseId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "GET",
    "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_data_source(
    dataSourceId,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_ingestion_job(data_source_id, ingestion_job_id, knowledge_base_id)
    get_ingestion_job(data_source_id, ingestion_job_id, knowledge_base_id, params::Dict{String,<:Any})

Get an ingestion job

# Arguments
- `data_source_id`:
- `ingestion_job_id`:
- `knowledge_base_id`:

"""
get_ingestion_job(
    dataSourceId,
    ingestionJobId,
    knowledgeBaseId;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "GET",
    "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)/ingestionjobs/$(ingestionJobId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_ingestion_job(
    dataSourceId,
    ingestionJobId,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)/ingestionjobs/$(ingestionJobId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_knowledge_base(knowledge_base_id)
    get_knowledge_base(knowledge_base_id, params::Dict{String,<:Any})

Get an existing knowledge base

# Arguments
- `knowledge_base_id`:

"""
get_knowledge_base(knowledgeBaseId; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "GET",
        "/knowledgebases/$(knowledgeBaseId)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_knowledge_base(
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/knowledgebases/$(knowledgeBaseId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_agent_action_groups(agent_id, agent_version)
    list_agent_action_groups(agent_id, agent_version, params::Dict{String,<:Any})

Lists an Action Group for existing Amazon Bedrock Agent Version

# Arguments
- `agent_id`: Id generated at the server side when an Agent is Listed
- `agent_version`: Id generated at the server side when an Agent is Listed

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
list_agent_action_groups(
    agentId, agentVersion; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "POST",
    "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function list_agent_action_groups(
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "POST",
        "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_agent_aliases(agent_id)
    list_agent_aliases(agent_id, params::Dict{String,<:Any})

Lists all the Aliases for an Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
list_agent_aliases(agentId; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "POST",
        "/agents/$(agentId)/agentaliases/";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_agent_aliases(
    agentId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent(
        "POST",
        "/agents/$(agentId)/agentaliases/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_agent_knowledge_bases(agent_id, agent_version)
    list_agent_knowledge_bases(agent_id, agent_version, params::Dict{String,<:Any})

List of Knowledge Bases associated to an existing Amazon Bedrock Agent Version

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Version number generated when a version is created

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
list_agent_knowledge_bases(
    agentId, agentVersion; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "POST",
    "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function list_agent_knowledge_bases(
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "POST",
        "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_agent_versions(agent_id)
    list_agent_versions(agent_id, params::Dict{String,<:Any})

Lists Agent Versions

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
list_agent_versions(agentId; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "POST",
        "/agents/$(agentId)/agentversions/";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_agent_versions(
    agentId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent(
        "POST",
        "/agents/$(agentId)/agentversions/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_agents()
    list_agents(params::Dict{String,<:Any})

Lists Agents

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
list_agents(; aws_config::AbstractAWSConfig=global_aws_config()) = bedrock_agent(
    "POST", "/agents/"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function list_agents(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent(
        "POST", "/agents/", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_data_sources(knowledge_base_id)
    list_data_sources(knowledge_base_id, params::Dict{String,<:Any})

List data sources

# Arguments
- `knowledge_base_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
list_data_sources(knowledgeBaseId; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "POST",
        "/knowledgebases/$(knowledgeBaseId)/datasources/";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_data_sources(
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "POST",
        "/knowledgebases/$(knowledgeBaseId)/datasources/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_ingestion_jobs(data_source_id, knowledge_base_id)
    list_ingestion_jobs(data_source_id, knowledge_base_id, params::Dict{String,<:Any})

List ingestion jobs

# Arguments
- `data_source_id`:
- `knowledge_base_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filters"`:
- `"maxResults"`:
- `"nextToken"`:
- `"sortBy"`:
"""
list_ingestion_jobs(
    dataSourceId, knowledgeBaseId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "POST",
    "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)/ingestionjobs/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function list_ingestion_jobs(
    dataSourceId,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "POST",
        "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)/ingestionjobs/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_knowledge_bases()
    list_knowledge_bases(params::Dict{String,<:Any})

List Knowledge Bases

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`:
- `"nextToken"`:
"""
list_knowledge_bases(; aws_config::AbstractAWSConfig=global_aws_config()) = bedrock_agent(
    "POST", "/knowledgebases/"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function list_knowledge_bases(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent(
        "POST",
        "/knowledgebases/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

List tags for a resource

# Arguments
- `resource_arn`:

"""
list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "GET",
        "/tags/$(resourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    prepare_agent(agent_id)
    prepare_agent(agent_id, params::Dict{String,<:Any})

Prepares an existing Amazon Bedrock Agent to receive runtime requests

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created

"""
prepare_agent(agentId; aws_config::AbstractAWSConfig=global_aws_config()) = bedrock_agent(
    "POST",
    "/agents/$(agentId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function prepare_agent(
    agentId, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent(
        "POST",
        "/agents/$(agentId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    start_ingestion_job(data_source_id, knowledge_base_id)
    start_ingestion_job(data_source_id, knowledge_base_id, params::Dict{String,<:Any})

Start a new ingestion job

# Arguments
- `data_source_id`:
- `knowledge_base_id`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientToken"`:
- `"description"`:
"""
start_ingestion_job(
    dataSourceId, knowledgeBaseId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "PUT",
    "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)/ingestionjobs/",
    Dict{String,Any}("clientToken" => string(uuid4()));
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function start_ingestion_job(
    dataSourceId,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)/ingestionjobs/",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("clientToken" => string(uuid4())), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Tag a resource

# Arguments
- `resource_arn`:
- `tags`:

"""
tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Untag a resource

# Arguments
- `resource_arn`:
- `tag_keys`:

"""
untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_agent(agent_id, agent_name, agent_resource_role_arn)
    update_agent(agent_id, agent_name, agent_resource_role_arn, params::Dict{String,<:Any})

Updates an existing Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_name`:
- `agent_resource_role_arn`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"customerEncryptionKeyArn"`:
- `"description"`:
- `"foundationModel"`:
- `"idleSessionTTLInSeconds"`:
- `"instruction"`:
- `"promptOverrideConfiguration"`:
"""
update_agent(
    agentId,
    agentName,
    agentResourceRoleArn;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/agents/$(agentId)/",
    Dict{String,Any}(
        "agentName" => agentName, "agentResourceRoleArn" => agentResourceRoleArn
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_agent(
    agentId,
    agentName,
    agentResourceRoleArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/$(agentId)/",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "agentName" => agentName, "agentResourceRoleArn" => agentResourceRoleArn
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_agent_action_group(action_group_id, action_group_name, agent_id, agent_version)
    update_agent_action_group(action_group_id, action_group_name, agent_id, agent_version, params::Dict{String,<:Any})

Updates an existing Action Group for Amazon Bedrock Agent

# Arguments
- `action_group_id`: Id generated at the server side when an Action Group is created under
  Agent
- `action_group_name`:
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Draft Version of the Agent.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"actionGroupExecutor"`:
- `"actionGroupState"`:
- `"apiSchema"`:
- `"description"`:
- `"parentActionGroupSignature"`:
"""
update_agent_action_group(
    actionGroupId,
    actionGroupName,
    agentId,
    agentVersion;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/$(actionGroupId)/",
    Dict{String,Any}("actionGroupName" => actionGroupName);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_agent_action_group(
    actionGroupId,
    actionGroupName,
    agentId,
    agentVersion,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/$(agentId)/agentversions/$(agentVersion)/actiongroups/$(actionGroupId)/",
        Dict{String,Any}(
            mergewith(
                _merge, Dict{String,Any}("actionGroupName" => actionGroupName), params
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_agent_alias(agent_alias_id, agent_alias_name, agent_id)
    update_agent_alias(agent_alias_id, agent_alias_name, agent_id, params::Dict{String,<:Any})

Updates an existing Alias for an Amazon Bedrock Agent

# Arguments
- `agent_alias_id`: Id generated at the server side when an Agent Alias is created
- `agent_alias_name`:
- `agent_id`: Id generated at the server side when an Agent is created

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`:
- `"routingConfiguration"`:
"""
update_agent_alias(
    agentAliasId, agentAliasName, agentId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent(
    "PUT",
    "/agents/$(agentId)/agentaliases/$(agentAliasId)/",
    Dict{String,Any}("agentAliasName" => agentAliasName);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_agent_alias(
    agentAliasId,
    agentAliasName,
    agentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/$(agentId)/agentaliases/$(agentAliasId)/",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("agentAliasName" => agentAliasName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_agent_knowledge_base(agent_id, agent_version, knowledge_base_id)
    update_agent_knowledge_base(agent_id, agent_version, knowledge_base_id, params::Dict{String,<:Any})

Updates an existing Knowledge Base associated to an Amazon Bedrock Agent

# Arguments
- `agent_id`: Id generated at the server side when an Agent is created
- `agent_version`: Draft Version of the Agent.
- `knowledge_base_id`: Id generated at the server side when a Knowledge Base is associated
  to an Agent

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`:
- `"knowledgeBaseState"`:
"""
update_agent_knowledge_base(
    agentId,
    agentVersion,
    knowledgeBaseId;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/$(knowledgeBaseId)/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_agent_knowledge_base(
    agentId,
    agentVersion,
    knowledgeBaseId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/agents/$(agentId)/agentversions/$(agentVersion)/knowledgebases/$(knowledgeBaseId)/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_data_source(data_source_configuration, data_source_id, knowledge_base_id, name)
    update_data_source(data_source_configuration, data_source_id, knowledge_base_id, name, params::Dict{String,<:Any})

Update an existing data source

# Arguments
- `data_source_configuration`:
- `data_source_id`:
- `knowledge_base_id`:
- `name`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`:
- `"serverSideEncryptionConfiguration"`:
- `"vectorIngestionConfiguration"`:
"""
update_data_source(
    dataSourceConfiguration,
    dataSourceId,
    knowledgeBaseId,
    name;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)",
    Dict{String,Any}("dataSourceConfiguration" => dataSourceConfiguration, "name" => name);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_data_source(
    dataSourceConfiguration,
    dataSourceId,
    knowledgeBaseId,
    name,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/knowledgebases/$(knowledgeBaseId)/datasources/$(dataSourceId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "dataSourceConfiguration" => dataSourceConfiguration, "name" => name
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_knowledge_base(knowledge_base_configuration, knowledge_base_id, name, role_arn, storage_configuration)
    update_knowledge_base(knowledge_base_configuration, knowledge_base_id, name, role_arn, storage_configuration, params::Dict{String,<:Any})

Update an existing knowledge base

# Arguments
- `knowledge_base_configuration`:
- `knowledge_base_id`:
- `name`:
- `role_arn`:
- `storage_configuration`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`:
"""
update_knowledge_base(
    knowledgeBaseConfiguration,
    knowledgeBaseId,
    name,
    roleArn,
    storageConfiguration;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent(
    "PUT",
    "/knowledgebases/$(knowledgeBaseId)",
    Dict{String,Any}(
        "knowledgeBaseConfiguration" => knowledgeBaseConfiguration,
        "name" => name,
        "roleArn" => roleArn,
        "storageConfiguration" => storageConfiguration,
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_knowledge_base(
    knowledgeBaseConfiguration,
    knowledgeBaseId,
    name,
    roleArn,
    storageConfiguration,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent(
        "PUT",
        "/knowledgebases/$(knowledgeBaseId)",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "knowledgeBaseConfiguration" => knowledgeBaseConfiguration,
                    "name" => name,
                    "roleArn" => roleArn,
                    "storageConfiguration" => storageConfiguration,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
