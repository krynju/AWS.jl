# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: launch_wizard
using AWS.Compat
using AWS.UUIDs

"""
    create_deployment(deployment_pattern_name, name, specifications, workload_name)
    create_deployment(deployment_pattern_name, name, specifications, workload_name, params::Dict{String,<:Any})

Creates a deployment for the given workload. Deployments created by this operation are not
available in the Launch Wizard console to use the Clone deployment action on.

# Arguments
- `deployment_pattern_name`: The name of the deployment pattern supported by a given
  workload. You can use the  ListWorkloadDeploymentPatterns  operation to discover supported
  values for this parameter.
- `name`: The name of the deployment.
- `specifications`: The settings specified for the deployment. For more information on the
  specifications required for creating a deployment, see Workload specifications.
- `workload_name`: The name of the workload. You can use the
  ListWorkloadDeploymentPatterns  operation to discover supported values for this parameter.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"dryRun"`: Checks whether you have the required permissions for the action, without
  actually making the request, and provides an error response. If you have the required
  permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
"""
create_deployment(
    deploymentPatternName,
    name,
    specifications,
    workloadName;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = launch_wizard(
    "POST",
    "/createDeployment",
    Dict{String,Any}(
        "deploymentPatternName" => deploymentPatternName,
        "name" => name,
        "specifications" => specifications,
        "workloadName" => workloadName,
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_deployment(
    deploymentPatternName,
    name,
    specifications,
    workloadName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return launch_wizard(
        "POST",
        "/createDeployment",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "deploymentPatternName" => deploymentPatternName,
                    "name" => name,
                    "specifications" => specifications,
                    "workloadName" => workloadName,
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_deployment(deployment_id)
    delete_deployment(deployment_id, params::Dict{String,<:Any})

Deletes a deployment.

# Arguments
- `deployment_id`: The ID of the deployment.

"""
delete_deployment(deploymentId; aws_config::AbstractAWSConfig=global_aws_config()) =
    launch_wizard(
        "POST",
        "/deleteDeployment",
        Dict{String,Any}("deploymentId" => deploymentId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function delete_deployment(
    deploymentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return launch_wizard(
        "POST",
        "/deleteDeployment",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("deploymentId" => deploymentId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_deployment(deployment_id)
    get_deployment(deployment_id, params::Dict{String,<:Any})

Returns information about the deployment.

# Arguments
- `deployment_id`: The ID of the deployment.

"""
get_deployment(deploymentId; aws_config::AbstractAWSConfig=global_aws_config()) =
    launch_wizard(
        "POST",
        "/getDeployment",
        Dict{String,Any}("deploymentId" => deploymentId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_deployment(
    deploymentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return launch_wizard(
        "POST",
        "/getDeployment",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("deploymentId" => deploymentId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_workload(workload_name)
    get_workload(workload_name, params::Dict{String,<:Any})

Returns information about a workload.

# Arguments
- `workload_name`: The name of the workload.

"""
get_workload(workloadName; aws_config::AbstractAWSConfig=global_aws_config()) =
    launch_wizard(
        "POST",
        "/getWorkload",
        Dict{String,Any}("workloadName" => workloadName);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_workload(
    workloadName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return launch_wizard(
        "POST",
        "/getWorkload",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("workloadName" => workloadName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_deployment_events(deployment_id)
    list_deployment_events(deployment_id, params::Dict{String,<:Any})

Lists the events of a deployment.

# Arguments
- `deployment_id`: The ID of the deployment.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to return for this request. To get the next
  page of items, make another request with the token returned in the output.
- `"nextToken"`: The token returned from a previous paginated request. Pagination continues
  from the end of the items returned by the previous request.
"""
list_deployment_events(deploymentId; aws_config::AbstractAWSConfig=global_aws_config()) =
    launch_wizard(
        "POST",
        "/listDeploymentEvents",
        Dict{String,Any}("deploymentId" => deploymentId);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_deployment_events(
    deploymentId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return launch_wizard(
        "POST",
        "/listDeploymentEvents",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("deploymentId" => deploymentId), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_deployments()
    list_deployments(params::Dict{String,<:Any})

Lists the deployments that have been created.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"filters"`: Filters to scope the results. The following filters are supported:
  WORKLOAD_NAME     DEPLOYMENT_STATUS
- `"maxResults"`: The maximum number of items to return for this request. To get the next
  page of items, make another request with the token returned in the output.
- `"nextToken"`: The token returned from a previous paginated request. Pagination continues
  from the end of the items returned by the previous request.
"""
list_deployments(; aws_config::AbstractAWSConfig=global_aws_config()) = launch_wizard(
    "POST", "/listDeployments"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function list_deployments(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return launch_wizard(
        "POST",
        "/listDeployments",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_workload_deployment_patterns(workload_name)
    list_workload_deployment_patterns(workload_name, params::Dict{String,<:Any})

Lists the workload deployment patterns.

# Arguments
- `workload_name`: The name of the workload.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to return for this request. To get the next
  page of items, make another request with the token returned in the output.
- `"nextToken"`: The token returned from a previous paginated request. Pagination continues
  from the end of the items returned by the previous request.
"""
list_workload_deployment_patterns(
    workloadName; aws_config::AbstractAWSConfig=global_aws_config()
) = launch_wizard(
    "POST",
    "/listWorkloadDeploymentPatterns",
    Dict{String,Any}("workloadName" => workloadName);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function list_workload_deployment_patterns(
    workloadName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return launch_wizard(
        "POST",
        "/listWorkloadDeploymentPatterns",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("workloadName" => workloadName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_workloads()
    list_workloads(params::Dict{String,<:Any})

Lists the workloads.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of items to return for this request. To get the next
  page of items, make another request with the token returned in the output.
- `"nextToken"`: The token returned from a previous paginated request. Pagination continues
  from the end of the items returned by the previous request.
"""
list_workloads(; aws_config::AbstractAWSConfig=global_aws_config()) = launch_wizard(
    "POST", "/listWorkloads"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function list_workloads(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return launch_wizard(
        "POST",
        "/listWorkloads",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
