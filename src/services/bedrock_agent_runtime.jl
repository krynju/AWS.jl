# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: bedrock_agent_runtime
using AWS.Compat
using AWS.UUIDs

"""
    invoke_agent(agent_alias_id, agent_id, input_text, session_id)
    invoke_agent(agent_alias_id, agent_id, input_text, session_id, params::Dict{String,<:Any})

Invokes the specified Bedrock model to run inference using the input provided in the
request body.

# Arguments
- `agent_alias_id`: Identifier for Agent Alias
- `agent_id`: Identifier for Agent
- `input_text`: Input data in the format specified in the Content-Type request header.
- `session_id`: Identifier used for the current session

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"enableTrace"`: Enable agent trace events for improved debugging
- `"endSession"`: End current session
- `"sessionState"`: Session state passed by customer. Base64 encoded json string
  representation of SessionState.
"""
invoke_agent(
    agentAliasId,
    agentId,
    inputText,
    sessionId;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock_agent_runtime(
    "POST",
    "/agents/$(agentId)/agentAliases/$(agentAliasId)/sessions/$(sessionId)/text",
    Dict{String,Any}("inputText" => inputText);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function invoke_agent(
    agentAliasId,
    agentId,
    inputText,
    sessionId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent_runtime(
        "POST",
        "/agents/$(agentId)/agentAliases/$(agentAliasId)/sessions/$(sessionId)/text",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("inputText" => inputText), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    retrieve(knowledge_base_id, retrieval_query)
    retrieve(knowledge_base_id, retrieval_query, params::Dict{String,<:Any})

Retrieve from knowledge base.

# Arguments
- `knowledge_base_id`:
- `retrieval_query`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"nextToken"`:
- `"retrievalConfiguration"`:
"""
retrieve(
    knowledgeBaseId, retrievalQuery; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock_agent_runtime(
    "POST",
    "/knowledgebases/$(knowledgeBaseId)/retrieve",
    Dict{String,Any}("retrievalQuery" => retrievalQuery);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function retrieve(
    knowledgeBaseId,
    retrievalQuery,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock_agent_runtime(
        "POST",
        "/knowledgebases/$(knowledgeBaseId)/retrieve",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("retrievalQuery" => retrievalQuery), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    retrieve_and_generate(input)
    retrieve_and_generate(input, params::Dict{String,<:Any})

RetrieveAndGenerate API

# Arguments
- `input`:

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"retrieveAndGenerateConfiguration"`:
- `"sessionConfiguration"`:
- `"sessionId"`:
"""
retrieve_and_generate(input; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock_agent_runtime(
        "POST",
        "/retrieveAndGenerate",
        Dict{String,Any}("input" => input);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function retrieve_and_generate(
    input, params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock_agent_runtime(
        "POST",
        "/retrieveAndGenerate",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("input" => input), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
