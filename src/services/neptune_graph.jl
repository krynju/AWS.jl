# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: neptune_graph
using AWS.Compat
using AWS.UUIDs

"""
    cancel_import_task(task_identifier)
    cancel_import_task(task_identifier, params::Dict{String,<:Any})

Deletes the specified import task

# Arguments
- `task_identifier`: The unique identifier of the import task.

"""
cancel_import_task(taskIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "DELETE",
        "/importtasks/$(taskIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function cancel_import_task(
    taskIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "DELETE",
        "/importtasks/$(taskIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_graph(graph_name, provisioned_memory)
    create_graph(graph_name, provisioned_memory, params::Dict{String,<:Any})

Creates a new Neptune Analytics graph.

# Arguments
- `graph_name`: A name for the new Neptune Analytics graph to be created. The name must
  contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a
  letter. It cannot end with a hyphen or contain two consecutive hyphens.
- `provisioned_memory`: The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to
  use for the graph. Min = 128

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"deletionProtection"`: Indicates whether or not to enable deletion protection on the
  graph. The graph can’t be deleted when deletion protection is enabled. (true or false).
- `"kmsKeyIdentifier"`: Specifies a KMS key to use to encrypt data in the new graph.
- `"publicConnectivity"`: Specifies whether or not the graph can be reachable over the
  internet. All access to graphs IAM authenticated. (true to enable, or false to disable.
- `"replicaCount"`: The number of replicas in other AZs. Min =0, Max = 2, Default =1
- `"tags"`: Adds metadata tags to the new graph. These tags can also be used with cost
  allocation reporting, or used in a Condition statement in an IAM policy.
- `"vectorSearchConfiguration"`: Specifies the number of dimensions for vector embeddings
  that will be loaded into the graph. The value is specified as dimension=value. Max = 65,535
"""
create_graph(
    graphName, provisionedMemory; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "POST",
    "/graphs",
    Dict{String,Any}("graphName" => graphName, "provisionedMemory" => provisionedMemory);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_graph(
    graphName,
    provisionedMemory,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "POST",
        "/graphs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "graphName" => graphName, "provisionedMemory" => provisionedMemory
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_graph_snapshot(graph_identifier, snapshot_name)
    create_graph_snapshot(graph_identifier, snapshot_name, params::Dict{String,<:Any})

Creates a snapshot of the specific graph.

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.
- `snapshot_name`: The snapshot name. For example: my-snapshot-1. The name must contain
  from 1 to 63 letters, numbers, or hyphens, and its first character must be a letter. It
  cannot end with a hyphen or contain two consecutive hyphens.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"tags"`: Adds metadata tags to the new graph. These tags can also be used with cost
  allocation reporting, or used in a Condition statement in an IAM policy.
"""
create_graph_snapshot(
    graphIdentifier, snapshotName; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "POST",
    "/snapshots",
    Dict{String,Any}("graphIdentifier" => graphIdentifier, "snapshotName" => snapshotName);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_graph_snapshot(
    graphIdentifier,
    snapshotName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "POST",
        "/snapshots",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "graphIdentifier" => graphIdentifier, "snapshotName" => snapshotName
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_graph_using_import_task(graph_name, role_arn, source)
    create_graph_using_import_task(graph_name, role_arn, source, params::Dict{String,<:Any})

Creates a new Neptune Analytics graph and imports data into it, either from Amazon Simple
Storage Service (S3) or from a Neptune database or a Neptune database snapshot. The data
can be loaded from files in S3 that in either the Gremlin CSV format or the openCypher load
format.

# Arguments
- `graph_name`: A name for the new Neptune Analytics graph to be created. The name must
  contain from 1 to 63 letters, numbers, or hyphens, and its first character must be a
  letter. It cannot end with a hyphen or contain two consecutive hyphens.
- `role_arn`: The ARN of the IAM role that will allow access to the data that is to be
  imported.
- `source`: A URL identifying to the location of the data to be imported. This can be an
  Amazon S3 path, or can point to a Neptune database endpoint or snapshot.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"deletionProtection"`: Indicates whether or not to enable deletion protection on the
  graph. The graph can’t be deleted when deletion protection is enabled. (true or false).
- `"failOnError"`: If set to true, the task halts when an import error is encountered. If
  set to false, the task skips the data that caused the error and continues if possible.
- `"format"`: Specifies the format of S3 data to be imported. Valid values are CSV, which
  identifies the Gremlin CSV format or OPENCYPHER, which identies the openCypher load format.
- `"importOptions"`: Contains options for controlling the import process. For example, if
  the failOnError key is set to false, the import skips problem data and attempts to continue
  (whereas if set to true, the default, or if omitted, the import operation halts immediately
  when an error is encountered.
- `"kmsKeyIdentifier"`: Specifies a KMS key to use to encrypt data imported into the new
  graph.
- `"maxProvisionedMemory"`: The maximum provisioned memory-optimized Neptune Capacity Units
  (m-NCUs) to use for the graph. Default: 1024, or the approved upper limit for your account.
   If both the minimum and maximum values are specified, the max of the
  min-provisioned-memory and max-provisioned memory is used to create the graph. If neither
  value is specified 128 m-NCUs are used.
- `"minProvisionedMemory"`: The minimum provisioned memory-optimized Neptune Capacity Units
  (m-NCUs) to use for the graph. Default: 128
- `"publicConnectivity"`: Specifies whether or not the graph can be reachable over the
  internet. All access to graphs IAM authenticated. (true to enable, or false to disable.
- `"replicaCount"`: The number of replicas in other AZs to provision on the new graph after
  import. Default = 0, Min = 0, Max = 2.
- `"tags"`: Adds metadata tags to the new graph. These tags can also be used with cost
  allocation reporting, or used in a Condition statement in an IAM policy.
- `"vectorSearchConfiguration"`: Specifies the number of dimensions for vector embeddings
  that will be loaded into the graph. The value is specified as dimension=value. Max = 65,535
"""
create_graph_using_import_task(
    graphName, roleArn, source; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "POST",
    "/importtasks",
    Dict{String,Any}("graphName" => graphName, "roleArn" => roleArn, "source" => source);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_graph_using_import_task(
    graphName,
    roleArn,
    source,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "POST",
        "/importtasks",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "graphName" => graphName, "roleArn" => roleArn, "source" => source
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_private_graph_endpoint(graph_identifier)
    create_private_graph_endpoint(graph_identifier, params::Dict{String,<:Any})

Create a private graph endpoint to allow private access from to the graph from within a
VPC. You can attach security groups to the private graph endpoint. VPC endpoint charges
apply.

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"subnetIds"`: Subnets in which private graph endpoint ENIs are created.
- `"vpcId"`:  The VPC in which the private graph endpoint needs to be created.
- `"vpcSecurityGroupIds"`: Security groups to be attached to the private graph endpoint..
"""
create_private_graph_endpoint(
    graphIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "POST",
    "/graphs/$(graphIdentifier)/endpoints/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_private_graph_endpoint(
    graphIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "POST",
        "/graphs/$(graphIdentifier)/endpoints/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_graph(graph_identifier, skip_snapshot)
    delete_graph(graph_identifier, skip_snapshot, params::Dict{String,<:Any})

Deletes the specified graph. Graphs cannot be deleted if delete-protection is enabled.

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.
- `skip_snapshot`: Determines whether a final graph snapshot is created before the graph is
  deleted. If true is specified, no graph snapshot is created. If false is specified, a graph
  snapshot is created before the graph is deleted.

"""
delete_graph(
    graphIdentifier, skipSnapshot; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "DELETE",
    "/graphs/$(graphIdentifier)",
    Dict{String,Any}("skipSnapshot" => skipSnapshot);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_graph(
    graphIdentifier,
    skipSnapshot,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "DELETE",
        "/graphs/$(graphIdentifier)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("skipSnapshot" => skipSnapshot), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_graph_snapshot(snapshot_identifier)
    delete_graph_snapshot(snapshot_identifier, params::Dict{String,<:Any})

Deletes the specifed graph snapshot.

# Arguments
- `snapshot_identifier`: ID of the graph snapshot to be deleted.

"""
delete_graph_snapshot(
    snapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "DELETE",
    "/snapshots/$(snapshotIdentifier)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_graph_snapshot(
    snapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "DELETE",
        "/snapshots/$(snapshotIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_private_graph_endpoint(graph_identifier, vpc_id)
    delete_private_graph_endpoint(graph_identifier, vpc_id, params::Dict{String,<:Any})

Deletes a private graph endpoint.

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.
- `vpc_id`: The ID of the VPC where the private endpoint is located.

"""
delete_private_graph_endpoint(
    graphIdentifier, vpcId; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "DELETE",
    "/graphs/$(graphIdentifier)/endpoints/$(vpcId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_private_graph_endpoint(
    graphIdentifier,
    vpcId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "DELETE",
        "/graphs/$(graphIdentifier)/endpoints/$(vpcId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_graph(graph_identifier)
    get_graph(graph_identifier, params::Dict{String,<:Any})

Gets information about a specified graph.

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.

"""
get_graph(graphIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "GET",
        "/graphs/$(graphIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_graph(
    graphIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "GET",
        "/graphs/$(graphIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_graph_snapshot(snapshot_identifier)
    get_graph_snapshot(snapshot_identifier, params::Dict{String,<:Any})

Retrieves a specified graph snapshot.

# Arguments
- `snapshot_identifier`: The ID of the snapshot to retrieve.

"""
get_graph_snapshot(snapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "GET",
        "/snapshots/$(snapshotIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_graph_snapshot(
    snapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "GET",
        "/snapshots/$(snapshotIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_import_task(task_identifier)
    get_import_task(task_identifier, params::Dict{String,<:Any})

Retrieves a specified import task.

# Arguments
- `task_identifier`: The unique identifier of the import task.

"""
get_import_task(taskIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "GET",
        "/importtasks/$(taskIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_import_task(
    taskIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "GET",
        "/importtasks/$(taskIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_private_graph_endpoint(graph_identifier, vpc_id)
    get_private_graph_endpoint(graph_identifier, vpc_id, params::Dict{String,<:Any})

Retrieves information about a specified private endpoint.

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.
- `vpc_id`: The ID of the VPC where the private endpoint is located.

"""
get_private_graph_endpoint(
    graphIdentifier, vpcId; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "GET",
    "/graphs/$(graphIdentifier)/endpoints/$(vpcId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_private_graph_endpoint(
    graphIdentifier,
    vpcId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "GET",
        "/graphs/$(graphIdentifier)/endpoints/$(vpcId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_graph_snapshots()
    list_graph_snapshots(params::Dict{String,<:Any})

Lists available snapshots of a specified Neptune Analytics graph.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"graphIdentifier"`: The unique identifier of the Neptune Analytics graph.
- `"maxResults"`: The total number of records to return in the command's output. If the
  total number of records available is more than the value specified, nextToken is provided
  in the command's output. To resume pagination, provide the nextToken output value in the
  nextToken argument of a subsequent command. Do not use the nextToken response element
  directly outside of the Amazon CLI.
- `"nextToken"`: Pagination token used to paginate output. When this value is provided as
  input, the service returns results from where the previous response left off. When this
  value is present in output, it indicates that there are more results to retrieve.
"""
list_graph_snapshots(; aws_config::AbstractAWSConfig=global_aws_config()) = neptune_graph(
    "GET", "/snapshots"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function list_graph_snapshots(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return neptune_graph(
        "GET", "/snapshots", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_graphs()
    list_graphs(params::Dict{String,<:Any})

Lists available Neptune Analytics graphs.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The total number of records to return in the command's output. If the
  total number of records available is more than the value specified, nextToken is provided
  in the command's output. To resume pagination, provide the nextToken output value in the
  nextToken argument of a subsequent command. Do not use the nextToken response element
  directly outside of the Amazon CLI.
- `"nextToken"`: Pagination token used to paginate output. When this value is provided as
  input, the service returns results from where the previous response left off. When this
  value is present in output, it indicates that there are more results to retrieve.
"""
list_graphs(; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph("GET", "/graphs"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
function list_graphs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return neptune_graph(
        "GET", "/graphs", params; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
    )
end

"""
    list_import_tasks()
    list_import_tasks(params::Dict{String,<:Any})

Lists import tasks.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The total number of records to return in the command's output. If the
  total number of records available is more than the value specified, nextToken is provided
  in the command's output. To resume pagination, provide the nextToken output value in the
  nextToken argument of a subsequent command. Do not use the nextToken response element
  directly outside of the Amazon CLI.
- `"nextToken"`: Pagination token used to paginate output. When this value is provided as
  input, the service returns results from where the previous response left off. When this
  value is present in output, it indicates that there are more results to retrieve.
"""
list_import_tasks(; aws_config::AbstractAWSConfig=global_aws_config()) = neptune_graph(
    "GET", "/importtasks"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function list_import_tasks(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return neptune_graph(
        "GET",
        "/importtasks",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_private_graph_endpoints(graph_identifier)
    list_private_graph_endpoints(graph_identifier, params::Dict{String,<:Any})

Lists private endpoints for a specified Neptune Analytics graph.

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The total number of records to return in the command's output. If the
  total number of records available is more than the value specified, nextToken is provided
  in the command's output. To resume pagination, provide the nextToken output value in the
  nextToken argument of a subsequent command. Do not use the nextToken response element
  directly outside of the Amazon CLI.
- `"nextToken"`: Pagination token used to paginate output. When this value is provided as
  input, the service returns results from where the previous response left off. When this
  value is present in output, it indicates that there are more results to retrieve.
"""
list_private_graph_endpoints(
    graphIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "GET",
    "/graphs/$(graphIdentifier)/endpoints/";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function list_private_graph_endpoints(
    graphIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "GET",
        "/graphs/$(graphIdentifier)/endpoints/",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists tags associated with a specified resource.

# Arguments
- `resource_arn`: The ARN of the resource.

"""
list_tags_for_resource(resourceArn; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "GET",
        "/tags/$(resourceArn)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_tags_for_resource(
    resourceArn,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "GET",
        "/tags/$(resourceArn)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    reset_graph(graph_identifier, skip_snapshot)
    reset_graph(graph_identifier, skip_snapshot, params::Dict{String,<:Any})

Empties the data from a specified Neptune Analytics graph.

# Arguments
- `graph_identifier`: ID of the graph to reset.
- `skip_snapshot`: Determines whether a final graph snapshot is created before the graph
  data is deleted. If set to true, no graph snapshot is created. If set to false, a graph
  snapshot is created before the data is deleted.

"""
reset_graph(
    graphIdentifier, skipSnapshot; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "PUT",
    "/graphs/$(graphIdentifier)",
    Dict{String,Any}("skipSnapshot" => skipSnapshot);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function reset_graph(
    graphIdentifier,
    skipSnapshot,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "PUT",
        "/graphs/$(graphIdentifier)",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("skipSnapshot" => skipSnapshot), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    restore_graph_from_snapshot(graph_name, snapshot_identifier)
    restore_graph_from_snapshot(graph_name, snapshot_identifier, params::Dict{String,<:Any})

Restores a graph from a snapshot.

# Arguments
- `graph_name`: A name for the new Neptune Analytics graph to be created from the snapshot.
  The name must contain from 1 to 63 letters, numbers, or hyphens, and its first character
  must be a letter. It cannot end with a hyphen or contain two consecutive hyphens.
- `snapshot_identifier`: The ID of the snapshot in question.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"deletionProtection"`: A value that indicates whether the graph has deletion protection
  enabled. The graph can't be deleted when deletion protection is enabled.
- `"provisionedMemory"`: The provisioned memory-optimized Neptune Capacity Units (m-NCUs)
  to use for the graph. Min = 128
- `"publicConnectivity"`: Specifies whether or not the graph can be reachable over the
  internet. All access to graphs IAM authenticated. (true to enable, or false to disable).
- `"replicaCount"`: The number of replicas in other AZs. Min =0, Max = 2, Default =1
- `"tags"`: Adds metadata tags to the snapshot. These tags can also be used with cost
  allocation reporting, or used in a Condition statement in an IAM policy.
"""
restore_graph_from_snapshot(
    graphName, snapshotIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = neptune_graph(
    "POST",
    "/snapshots/$(snapshotIdentifier)/restore",
    Dict{String,Any}("graphName" => graphName);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function restore_graph_from_snapshot(
    graphName,
    snapshotIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "POST",
        "/snapshots/$(snapshotIdentifier)/restore",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("graphName" => graphName), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Adds tags to the specified resource.

# Arguments
- `resource_arn`: ARN of the resource for which tags need to be added.
- `tags`: The tags to be assigned to the Neptune Analytics resource. The tags are metadata
  that are specified as a list of key-value pairs:  Key (string)   –   A key is the
  required name of the tag. The string value can be from 1 to 128 Unicode characters in
  length. It can't be prefixed with aws: and can only contain the set of Unicode characters
  specified by this Java regular expression: \"^([p{L}p{Z}p{N}_.:/=+-]*)\").  Value (string)
    –   A value is the optional value of the tag. The string value can be from 1 to 256
  Unicode characters in length. It can't be prefixed with aws: and can only contain the set
  of Unicode characters specified by this Java regular expression:
  \"^([p{L}p{Z}p{N}_.:/=+-]*)\").

"""
tag_resource(resourceArn, tags; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function tag_resource(
    resourceArn,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "POST",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tags" => tags), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes the specified tags from the specified resource.

# Arguments
- `resource_arn`: ARN of the resource whose tag needs to be removed.
- `tag_keys`: Tag keys for the tags to be removed.

"""
untag_resource(resourceArn, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}("tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function untag_resource(
    resourceArn,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "DELETE",
        "/tags/$(resourceArn)",
        Dict{String,Any}(mergewith(_merge, Dict{String,Any}("tagKeys" => tagKeys), params));
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_graph(graph_identifier)
    update_graph(graph_identifier, params::Dict{String,<:Any})

Updates the configuration of a specified Neptune Analytics graph

# Arguments
- `graph_identifier`: The unique identifier of the Neptune Analytics graph.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"deletionProtection"`: A value that indicates whether the graph has deletion protection
  enabled. The graph can't be deleted when deletion protection is enabled.
- `"provisionedMemory"`: The provisioned memory-optimized Neptune Capacity Units (m-NCUs)
  to use for the graph. Min = 128
- `"publicConnectivity"`: Specifies whether or not the graph can be reachable over the
  internet. All access to graphs IAM authenticated. (true to enable, or false to disable.
"""
update_graph(graphIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    neptune_graph(
        "PATCH",
        "/graphs/$(graphIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function update_graph(
    graphIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return neptune_graph(
        "PATCH",
        "/graphs/$(graphIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
