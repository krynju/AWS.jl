# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: bedrock
using AWS.Compat
using AWS.UUIDs

"""
    create_model_customization_job(base_model_identifier, custom_model_name, hyper_parameters, job_name, output_data_config, role_arn, training_data_config)
    create_model_customization_job(base_model_identifier, custom_model_name, hyper_parameters, job_name, output_data_config, role_arn, training_data_config, params::Dict{String,<:Any})

Creates a fine-tuning job to customize a base model. You specify the base foundation model
and the location of the training data. After the model-customization job completes
successfully, your custom model resource will be ready to use. Training data contains input
and output text for each record in a JSONL format. Optionally, you can specify validation
data in the same format as the training data. Amazon Bedrock returns validation loss
metrics and output generations after the job completes.   Model-customization jobs are
asynchronous and the completion time depends on the base model and the training/validation
data size. To monitor a job, use the GetModelCustomizationJob operation to retrieve the job
status. For more information, see Custom models in the Bedrock User Guide.

# Arguments
- `base_model_identifier`: Name of the base model.
- `custom_model_name`: Enter a name for the custom model.
- `hyper_parameters`: Parameters related to tuning the model.
- `job_name`: Enter a unique name for the fine-tuning job.
- `output_data_config`: S3 location for the output data.
- `role_arn`: The Amazon Resource Name (ARN) of an IAM role that Amazon Bedrock can assume
  to perform tasks on your behalf. For example, during model training, Amazon Bedrock needs
  your permission to read input data from an S3 bucket, write model artifacts to an S3
  bucket. To pass this role to Amazon Bedrock, the caller of this API must have the
  iam:PassRole permission.
- `training_data_config`: Information about the training dataset.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientRequestToken"`: Unique token value that you can provide. The
  GetModelCustomizationJob response includes the same token value.
- `"customModelKmsKeyId"`: The custom model is encrypted at rest using this key.
- `"customModelTags"`: Assign tags to the custom model.
- `"customizationType"`: The customization type.
- `"jobTags"`: Assign tags to the job.
- `"validationDataConfig"`: Information about the validation dataset.
- `"vpcConfig"`: VPC configuration (optional). Configuration parameters for the private
  Virtual Private Cloud (VPC) that contains the resources you are using for this job.
"""
create_model_customization_job(
    baseModelIdentifier,
    customModelName,
    hyperParameters,
    jobName,
    outputDataConfig,
    roleArn,
    trainingDataConfig;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock(
    "POST",
    "/model-customization-jobs",
    Dict{String,Any}(
        "baseModelIdentifier" => baseModelIdentifier,
        "customModelName" => customModelName,
        "hyperParameters" => hyperParameters,
        "jobName" => jobName,
        "outputDataConfig" => outputDataConfig,
        "roleArn" => roleArn,
        "trainingDataConfig" => trainingDataConfig,
        "clientRequestToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_model_customization_job(
    baseModelIdentifier,
    customModelName,
    hyperParameters,
    jobName,
    outputDataConfig,
    roleArn,
    trainingDataConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "POST",
        "/model-customization-jobs",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "baseModelIdentifier" => baseModelIdentifier,
                    "customModelName" => customModelName,
                    "hyperParameters" => hyperParameters,
                    "jobName" => jobName,
                    "outputDataConfig" => outputDataConfig,
                    "roleArn" => roleArn,
                    "trainingDataConfig" => trainingDataConfig,
                    "clientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    create_provisioned_model_throughput(model_id, model_units, provisioned_model_name)
    create_provisioned_model_throughput(model_id, model_units, provisioned_model_name, params::Dict{String,<:Any})

Creates a provisioned throughput with dedicated capacity for a foundation model or a
fine-tuned model. For more information, see Provisioned throughput in the Bedrock User
Guide.

# Arguments
- `model_id`: Name or ARN of the model to associate with this provisioned throughput.
- `model_units`: Number of model units to allocate.
- `provisioned_model_name`: Unique name for this provisioned throughput.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"clientRequestToken"`: Unique token value that you can provide. If this token matches a
  previous request, Amazon Bedrock ignores the request, but does not return an error.
- `"commitmentDuration"`: Commitment duration requested for the provisioned throughput.
- `"tags"`: Tags to associate with this provisioned throughput.
"""
create_provisioned_model_throughput(
    modelId,
    modelUnits,
    provisionedModelName;
    aws_config::AbstractAWSConfig=global_aws_config(),
) = bedrock(
    "POST",
    "/provisioned-model-throughput",
    Dict{String,Any}(
        "modelId" => modelId,
        "modelUnits" => modelUnits,
        "provisionedModelName" => provisionedModelName,
        "clientRequestToken" => string(uuid4()),
    );
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function create_provisioned_model_throughput(
    modelId,
    modelUnits,
    provisionedModelName,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "POST",
        "/provisioned-model-throughput",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}(
                    "modelId" => modelId,
                    "modelUnits" => modelUnits,
                    "provisionedModelName" => provisionedModelName,
                    "clientRequestToken" => string(uuid4()),
                ),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_custom_model(model_identifier)
    delete_custom_model(model_identifier, params::Dict{String,<:Any})

Deletes a custom model that you created earlier. For more information, see Custom models in
the Bedrock User Guide.

# Arguments
- `model_identifier`: Name of the model to delete.

"""
delete_custom_model(modelIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "DELETE",
        "/custom-models/$(modelIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function delete_custom_model(
    modelIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "DELETE",
        "/custom-models/$(modelIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_model_invocation_logging_configuration()
    delete_model_invocation_logging_configuration(params::Dict{String,<:Any})

Delete the invocation logging.

"""
delete_model_invocation_logging_configuration(;
    aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "DELETE",
    "/logging/modelinvocations";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_model_invocation_logging_configuration(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock(
        "DELETE",
        "/logging/modelinvocations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    delete_provisioned_model_throughput(provisioned_model_id)
    delete_provisioned_model_throughput(provisioned_model_id, params::Dict{String,<:Any})

Deletes a provisioned throughput. For more information, see Provisioned throughput in the
Bedrock User Guide.

# Arguments
- `provisioned_model_id`: The ARN or name of the provisioned throughput.

"""
delete_provisioned_model_throughput(
    provisionedModelId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "DELETE",
    "/provisioned-model-throughput/$(provisionedModelId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function delete_provisioned_model_throughput(
    provisionedModelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "DELETE",
        "/provisioned-model-throughput/$(provisionedModelId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_custom_model(model_identifier)
    get_custom_model(model_identifier, params::Dict{String,<:Any})

Get the properties associated with a Amazon Bedrock custom model that you have created.For
more information, see Custom models in the Bedrock User Guide.

# Arguments
- `model_identifier`: Name or ARN of the custom model.

"""
get_custom_model(modelIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "GET",
        "/custom-models/$(modelIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_custom_model(
    modelIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "GET",
        "/custom-models/$(modelIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_foundation_model(model_identifier)
    get_foundation_model(model_identifier, params::Dict{String,<:Any})

Get details about a Amazon Bedrock foundation model.

# Arguments
- `model_identifier`: The model identifier.

"""
get_foundation_model(modelIdentifier; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "GET",
        "/foundation-models/$(modelIdentifier)";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function get_foundation_model(
    modelIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "GET",
        "/foundation-models/$(modelIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_model_customization_job(job_identifier)
    get_model_customization_job(job_identifier, params::Dict{String,<:Any})

Retrieves the properties associated with a model-customization job, including the status of
the job. For more information, see Custom models in the Bedrock User Guide.

# Arguments
- `job_identifier`: Identifier for the customization job.

"""
get_model_customization_job(
    jobIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "GET",
    "/model-customization-jobs/$(jobIdentifier)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_model_customization_job(
    jobIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "GET",
        "/model-customization-jobs/$(jobIdentifier)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_model_invocation_logging_configuration()
    get_model_invocation_logging_configuration(params::Dict{String,<:Any})

Get the current configuration values for model invocation logging.

"""
get_model_invocation_logging_configuration(;
    aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "GET",
    "/logging/modelinvocations";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_model_invocation_logging_configuration(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock(
        "GET",
        "/logging/modelinvocations",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    get_provisioned_model_throughput(provisioned_model_id)
    get_provisioned_model_throughput(provisioned_model_id, params::Dict{String,<:Any})

Get details for a provisioned throughput. For more information, see Provisioned throughput
in the Bedrock User Guide.

# Arguments
- `provisioned_model_id`: The ARN or name of the provisioned throughput.

"""
get_provisioned_model_throughput(
    provisionedModelId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "GET",
    "/provisioned-model-throughput/$(provisionedModelId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function get_provisioned_model_throughput(
    provisionedModelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "GET",
        "/provisioned-model-throughput/$(provisionedModelId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_custom_models()
    list_custom_models(params::Dict{String,<:Any})

Returns a list of the custom models that you have created with the
CreateModelCustomizationJob operation. For more information, see Custom models in the
Bedrock User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"baseModelArnEquals"`: Return custom models only if the base model ARN matches this
  parameter.
- `"creationTimeAfter"`: Return custom models created after the specified time.
- `"creationTimeBefore"`: Return custom models created before the specified time.
- `"foundationModelArnEquals"`: Return custom models only if the foundation model ARN
  matches this parameter.
- `"maxResults"`: Maximum number of results to return in the response.
- `"nameContains"`: Return custom models only if the job name contains these characters.
- `"nextToken"`: Continuation token from the previous response, for Amazon Bedrock to list
  the next set of results.
- `"sortBy"`: The field to sort by in the returned list of models.
- `"sortOrder"`: The sort order of the results.
"""
list_custom_models(; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock("GET", "/custom-models"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET)
function list_custom_models(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock(
        "GET",
        "/custom-models",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_foundation_models()
    list_foundation_models(params::Dict{String,<:Any})

List of Amazon Bedrock foundation models that you can use. For more information, see
Foundation models in the Bedrock User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"byCustomizationType"`: List by customization type.
- `"byInferenceType"`: List by inference type.
- `"byOutputModality"`: List by output modality type.
- `"byProvider"`: A Amazon Bedrock model provider.
"""
list_foundation_models(; aws_config::AbstractAWSConfig=global_aws_config()) = bedrock(
    "GET", "/foundation-models"; aws_config=aws_config, feature_set=SERVICE_FEATURE_SET
)
function list_foundation_models(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock(
        "GET",
        "/foundation-models",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_model_customization_jobs()
    list_model_customization_jobs(params::Dict{String,<:Any})

Returns a list of model customization jobs that you have submitted. You can filter the jobs
to return based on one or more criteria. For more information, see Custom models in the
Bedrock User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"creationTimeAfter"`: Return customization jobs created after the specified time.
- `"creationTimeBefore"`: Return customization jobs created before the specified time.
- `"maxResults"`: Maximum number of results to return in the response.
- `"nameContains"`: Return customization jobs only if the job name contains these
  characters.
- `"nextToken"`: Continuation token from the previous response, for Amazon Bedrock to list
  the next set of results.
- `"sortBy"`: The field to sort by in the returned list of jobs.
- `"sortOrder"`: The sort order of the results.
- `"statusEquals"`: Return customization jobs with the specified status.
"""
list_model_customization_jobs(; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "GET",
        "/model-customization-jobs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_model_customization_jobs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock(
        "GET",
        "/model-customization-jobs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_provisioned_model_throughputs()
    list_provisioned_model_throughputs(params::Dict{String,<:Any})

List the provisioned capacities. For more information, see Provisioned throughput in the
Bedrock User Guide.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"creationTimeAfter"`: Return provisioned capacities created after the specified time.
- `"creationTimeBefore"`: Return provisioned capacities created before the specified time.
- `"maxResults"`: THe maximum number of results to return in the response.
- `"modelArnEquals"`: Return the list of provisioned capacities where their model ARN is
  equal to this parameter.
- `"nameContains"`: Return the list of provisioned capacities if their name contains these
  characters.
- `"nextToken"`: Continuation token from the previous response, for Amazon Bedrock to list
  the next set of results.
- `"sortBy"`: The field to sort by in the returned list of provisioned capacities.
- `"sortOrder"`: The sort order of the results.
- `"statusEquals"`: Return the list of provisioned capacities that match the specified
  status.
"""
list_provisioned_model_throughputs(; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "GET",
        "/provisioned-model-throughputs";
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_provisioned_model_throughputs(
    params::AbstractDict{String}; aws_config::AbstractAWSConfig=global_aws_config()
)
    return bedrock(
        "GET",
        "/provisioned-model-throughputs",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

List the tags associated with the specified resource. For more information, see Tagging
resources in the Bedrock User Guide.

# Arguments
- `resource_arn`: The ARN of the resource.

"""
list_tags_for_resource(resourceARN; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "POST",
        "/listTagsForResource",
        Dict{String,Any}("resourceARN" => resourceARN);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function list_tags_for_resource(
    resourceARN,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "POST",
        "/listTagsForResource",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("resourceARN" => resourceARN), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    put_model_invocation_logging_configuration(logging_config)
    put_model_invocation_logging_configuration(logging_config, params::Dict{String,<:Any})

Set the configuration values for model invocation logging.

# Arguments
- `logging_config`: The logging configuration values to set.

"""
put_model_invocation_logging_configuration(
    loggingConfig; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "PUT",
    "/logging/modelinvocations",
    Dict{String,Any}("loggingConfig" => loggingConfig);
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function put_model_invocation_logging_configuration(
    loggingConfig,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "PUT",
        "/logging/modelinvocations",
        Dict{String,Any}(
            mergewith(_merge, Dict{String,Any}("loggingConfig" => loggingConfig), params)
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    stop_model_customization_job(job_identifier)
    stop_model_customization_job(job_identifier, params::Dict{String,<:Any})

Stops an active model customization job. For more information, see Custom models in the
Bedrock User Guide.

# Arguments
- `job_identifier`: Job identifier of the job to stop.

"""
stop_model_customization_job(
    jobIdentifier; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "POST",
    "/model-customization-jobs/$(jobIdentifier)/stop";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function stop_model_customization_job(
    jobIdentifier,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "POST",
        "/model-customization-jobs/$(jobIdentifier)/stop",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Associate tags with a resource. For more information, see Tagging resources in the Bedrock
User Guide.

# Arguments
- `resource_arn`: The ARN of the resource to tag.
- `tags`: Tags to associate with the resource.

"""
tag_resource(resourceARN, tags; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "POST",
        "/tagResource",
        Dict{String,Any}("resourceARN" => resourceARN, "tags" => tags);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function tag_resource(
    resourceARN,
    tags,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "POST",
        "/tagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceARN" => resourceARN, "tags" => tags),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Remove one or more tags from a resource. For more information, see Tagging resources in the
Bedrock User Guide.

# Arguments
- `resource_arn`: The ARN of the resource to untag.
- `tag_keys`: Tag keys of the tags to remove from the resource.

"""
untag_resource(resourceARN, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()) =
    bedrock(
        "POST",
        "/untagResource",
        Dict{String,Any}("resourceARN" => resourceARN, "tagKeys" => tagKeys);
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
function untag_resource(
    resourceARN,
    tagKeys,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "POST",
        "/untagResource",
        Dict{String,Any}(
            mergewith(
                _merge,
                Dict{String,Any}("resourceARN" => resourceARN, "tagKeys" => tagKeys),
                params,
            ),
        );
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end

"""
    update_provisioned_model_throughput(provisioned_model_id)
    update_provisioned_model_throughput(provisioned_model_id, params::Dict{String,<:Any})

Update a provisioned throughput. For more information, see Provisioned throughput in the
Bedrock User Guide.

# Arguments
- `provisioned_model_id`: The ARN or name of the provisioned throughput to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"desiredModelId"`: The ARN of the new model to associate with this provisioned
  throughput.
- `"desiredProvisionedModelName"`: The new name for this provisioned throughput.
"""
update_provisioned_model_throughput(
    provisionedModelId; aws_config::AbstractAWSConfig=global_aws_config()
) = bedrock(
    "PATCH",
    "/provisioned-model-throughput/$(provisionedModelId)";
    aws_config=aws_config,
    feature_set=SERVICE_FEATURE_SET,
)
function update_provisioned_model_throughput(
    provisionedModelId,
    params::AbstractDict{String};
    aws_config::AbstractAWSConfig=global_aws_config(),
)
    return bedrock(
        "PATCH",
        "/provisioned-model-throughput/$(provisionedModelId)",
        params;
        aws_config=aws_config,
        feature_set=SERVICE_FEATURE_SET,
    )
end
